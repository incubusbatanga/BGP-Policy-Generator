
Multiple Whois servers can be defined both globally and per-policy. By default,
global servers will be used, but if autopolicy template defines it's own servers,
they will be used instead of global ones. However, if there isn't at least one
per-policy server with valid parameters, global servers will be used as backup.

They are queried in the order they were defined: the first server in the list is
always queried first. If query produces no usable results, servers will be rotated
by moving the first server to the back of the list and querying the next in line,
which has now become the first. This process will continue until usable information
is retrieved or all servers have been exausted.

Similarly, if a connection fails for whatever reason, failed server will be removed
from the list for the duration of the update run and the next server in line will
be queried. Servers are removed from the list on configuration/transport errors -
those that break whois queries before any response could be retrieved.

Note that in order to get better performance, whois code will perform as many
things in a single call as possible. For example, as-sets are recursively expanded
into a list of ASNs in a single call and then that entire list is used to find
associated route objects for every listed ASN in a small number of multi-object
queries to a single whois server. However, if list contains ASNs registered with
other RIR databases, their prefixes won't be found on your current server.

Detecting which prefixes are missing or separating ASNs by their source and querying
different servers would involve additional queries and processing which would impact
performance and is not supported at the moment.

The solution is to query Whois servers that support multiple sources (whois.radb.net,
for example). They have internally defined database search order which should be ok
in most cases. However, if need be, multiple sources can be configured explicitly
per-server as a comma-separated list of source names and they will be searched in
the order they were specified (order of preference). That way, a multi-object query
to a single server will produce a list of objects registered in different databases.
If an object is provided by more than one source, multiple versions of the same
object will be returned, but only the most preferred source that defines that object
will be used. In other words - the first occurence of the object that defines all
required attributes will be used.

Whois is globally configured as an array of servers at $config['whois']:

  $config['whois'] = array( $server1, $server2, ... $serverN );

or

  $config['whois'][] = $server1;
  $config['whois'][] = $server2;
   ...
  $config['whois'][] = $serverN;

Each server is itself an associative array of parameters:

  $serverN = array(

      'server'                       - Hostname or IPv4/IPv6 address of the server.

                                       Default: none

      'port'                         - TCP port of the whois service

                                       Default: 43

      'family'                       - Address family or families used for connection.
                                       If whois server is specified as an IP address,
                                       the address must match address family (obviously).
                                       If hostname is given, it may resolve to both
                                       IPv4 and IPv6 address(es). This parameter will
                                       determine which one will be used first or used
                                       exclusively.

                                       Can be:

                                         - 'inet' for IPv4 connection
                                         - 'inet6' for IPv6 connection
                                         - 'inet,inet6' to allow both
                                            IPv4 and IPv6 connection,
                                            preferring IPv4 over IPv6.
                                         - 'inet6,inet' to allow both
                                            IPv4 and IPv6 connection,
                                            preferring IPv6 over IPv4.

                                       Default: 'inet6,inet'

      'type'                         - This option is used to determine the way bulk mode
                                       is handled. Can be:

                                         - 'ripe' for native RIPE server
                                         - 'irrd' for IRRd-based server
                                         - none for generic whois server, which disables
                                           bulk mode. Compatibility versus performance.
                                           Still needs to support RIPE-compatibile
                                           options, tho.

                                       Default: none

      'source'                       - RPSL database source(s). When using RIPE's native
                                       server, there is no source other than 'RIPE',
                                       but IRRd based servers hosting or mirroring more
                                       than one database could have multiple objects
                                       with same primary/lookup keys, but different
                                       source. In that case, it might be important to
                                       explicitly specify which source database to use.

                                       Alternatively, we might want to limit the search
                                       for a particular object to a particular source or
                                       set of sources, instead of searching all databases
                                       supported by server.

                                       Reducing the set of sources to search, of course,
                                       improves the search performance, but decreases
                                       the chance of finding requested objects (unless
                                       we know which source(s) might produce the desired
                                       results).

                                       Sources can be specified as a comma-separated
                                       list of source names. They will be searched in
                                       the order they were specified.

                                       Default: none (search all supported databases)

      'sock_timeout'                 - Timeout (in seconds) for socket operations (like
                                       connect, read, write, ... for example).

                                       Default: 5

      'query_timeout'                - Maximum time (in seconds) a single query can last.

                                       Default: 1800 for bulk mode, 60 for normal mode

      'query_size'                   - The number of objects per query in bulk mode.
                                       Low level whois code can always search multiple
                                       objects, but how it handles communication with
                                       a whois server differs between the normal and
                                       the bulk mode.

                                       In normal mode, objects are searched one by one,
                                       establishing a new connection each time. Not very
                                       efficient, but safe.

                                       In bulk mode, objects are searched in groups of
                                       query_size number of objects per query.

                                       Different servers (assuming they support bulk
                                       mode to begin with) can handle different number
                                       of objects per query. This limit is not a hard
                                       limit and it won't produce a clear warning or
                                       error. Instead, going over the limit can have
                                       unpredictable results which can be hard to
                                       detect - like returning incomplete information.
                                       Thus, incresing this number will improve network
                                       performance, but will also increase the risk of
                                       silent errors occuring.

                                       In most cases, there is no reason to use anything
                                       other than the default.

                                       Default: 1000

    )

Per-policy servers are defined within autopolicy template. They have the same structure
and use the same set of parameters. The only thing different is the syntax (autopolicy
templates being XML files). For details on how to configure per-policy servers within
autopolicy templates, see TEMPLATES document.

