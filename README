
What BGP Policy Generator is ?
==============================

It generates BGP policy configuration for network OSes from various vendors
when invoked from cli or from web, via specific URL.

The most common elements of policy configurations, like prefix lists and
BGP import filters are generated from XML-based templates defined manually,
by users, or automatically, by fetching policy data from RIPE's database.

Automatically generating policies is a two step process:
 1) policy and prefix list templates are auto-generated from policy data
    (export attributes, AS-sets, route objects, ...) retrieved from RIPE
    database. Once generated, these templates are no different from any
    other (manually created) template.
 2) BGP policy configuration is generated on demand from auto-generated
    templates.

Web part of this software reads templates and generates network devices'
configuration on the fly whether they were auto-generated or configured
manually. It's triggered by opening specific URL like

  http://<yourhostname>/<platform>/<type>

where <platform> means network device's OS (ios, junos, ...) which
determines the format of generated configuration, while <type> means
the type of configuration we want (policies, prefix lists, ...).

Network devices can invoke generator URLs and fetch output directly,
include URLs in local automation scripts, or fetch generated config by
some other means.

Configuration can also be generated from shell, which brings us to
the shell part of this software. Aside from generating configurations,
autopolicies can be generated and updated from shell, too. Most likely,
these operations would be invoked periodically, from cron.

What BGP Policy Generator isn't ?
=================================

It is NOT a complete BGP configuration management solution nor is it
a generic policy generation tool. In fact, as of this writing, it doesn't
handle BGP config at all - only the policy parts referenced by BGP config
and only those most likely to get changed and are good candidates to be
generated automatically.

That means it doesn't cover all possible angles of policy configuration
and it's not ment to. It's goal is to provide easy way for multihomed
systems to maintain their peering policies, especially import policies
which can sometimes be difficult to maintain when peering with large
networks.

Whois/IRR
=========

Templates are auto-updated by fetching data from a whois database. For each
policy, peer's aut-num object is examined to determine which ASNs are exported
to us. Next, route objects for each of exported ASNs are collected. This data
is used to generate policy and prefix list templates, which are subsequently
used to generate configurations. Device config generation is independent
process and doesn't care where it's templates come from. They could just
as well be created by hand.

Whois queries can be performed as single queries, which is the default mode
(connect->query->response->disconnect), or in so called 'bulk mode', over
a persistent connection (connect->multiple queries->bulk response->disconnect).
Needless to say, bulk mode is a lot faster, but sort of a server-specific
feature and not supported by all whois servers. Even those that support it
handle it differently.

Whois is a simple protocol, but commands/options differ greatly between 
various whois servers. BGP Policy Generator requires RIPE-compatibile whois
server and explicitly supports two distinct flavors - native RIPE whois and
servers based on IRRd software. IRRd-based servers are widely used and usually
mirror more than just RIPE database. IRRd supports RIPE-specific options that
we require, but handles bulk mode slightly different from native RIPE server.

By default, RIPE whois server is used, but it is a configurable parameter.

VCS - Version Control System
============================

Templates are maintained in a VCS repository which keeps entire history of
template changes thus enabling us to generate any configuration revision since
the repository's creation. Of course, it also allows us to manually extract
templates from any point in recorded history.

VCS also provides better control of current changes. Nothing will be recorded
in change history unless there really has been changes. On a successful commit,
a notification email can be sent containing information in configurable level
of detail. Also, user-configurable scripts can be invoked if VCS successfully
recorded changes made.

VCS is implemented using GIT. This means, of course, that GIT is one of this
software's dependencies and is required for proper operation.

Installation
============

Quick way - just unpack it somewhere inside DocumentRoot and point your
devices or scripts to

  http://<hostname>/.../docroot/<platform>/<type>

It should work.

Proper way - unpack to some dir (say, /opt/bgp-policy-generator), create
virtual host using /opt/bgp-policy-generator/docroot as DocumentRoot and
configure that directory with 'AllowOverride all'. For example:

<VirtualHost *:80> 
    ServerName your_vhost
    DocumentRoot your_install_dir/docroot
    DirectoryIndex index.php
</VirtualHost>

<Directory your_install_dir/docroot>
    Options Indexes FollowSymlinks
    AllowOverride All
    Order allow,deny
    Allow from all
</Directory>

Then you can point your devices/scripts to

  http://<your_vhost>/<platform>/<type>

and that's it.

In either case, if you wish to perform regular autopolicy updates, you need
to schedule <installdir>/update-templates.php triggers via cron. How often
is completely up to you. Bear in mind, though, that some peers might export
A LOT of ASNs which results in even more announced routes, which might take
considerable time to collect.

Also, if you cloned this software from a git repository, make sure to delete
.git directory to prevent it from interfering with our VCS.

At last, chown templates dir and everything in it to the user/group http
server is running as.

Configuration
=============

Edit config.php. There's just a few things you might want to change
right away:

 - Set 'local_as' parameter if you want to use autopolicy update.
 - Set the user/group to the user/group http daemon is running as.
 - Set the full path to the git executable.
 - Set timezone to prevent PHP complaints.

That's about it. The rest depends on your needs.

Usage
=====

Create autopolicy, policy and prefix list templates and fetch your device
configurations. To retrieve the entire configuration via http, open

  http://<hostname>/<platform>/<type>

To retrieve specific configuration via http, open

  http://<hostname>/<platform>/<type>/<name>

To retrieve multiple specific configurations via http, open

  http://<hostname>/<platform>/<type>/<name1>,<name2>,<name3>,...

To retrieve any previous version of entire configuration or, simply, any
version that was current at the specified date and time via http, open

  http://<hostname>/<platform>/<type>/<when>/<datetime>

where <when> can be 'before' or 'after' and <datetime> can be any date/time
string that can be parsed by strtotime(), which provides quite the flexibility.

To retrieve any previous version of a specific configuration or multiple specific
configurations via http, open

  http://<hostname>/<platform>/<type>/<when>/<datetime>/<name1>,<name2>,<name3>,...

To update autopolicies via http, open

  http://<hostname>/template/update

To update specific autopolicy via http, open

  http://<hostname>/template/update/<name>

To update multiple specific autopolicies via http, open

  http://<hostname>/template/update/<name1>,<name2>,<name3>,...

To retrieve the entire configuration from shell, invoke

  <installdir>/generate-configs.php <platform> <type>

To retrieve specific configuration from shell, invoke

  <installdir>/generate-configs.php <platform> <type> <name>

To retrieve multiple specific configurations from shell, invoke

  <installdir>/generate-configs.php <platform> <type> <name1>,<name2>,<name3>,...

To retrieve any previous version of entire configuration or, simply, any version
that was current at the specified date and time from shell, invoke

  <installdir>/generate-configs.php --before|--after <datetime> <platform> <type>

where <datetime> can be any date/time string that can be parsed by strtotime().
Make sure to put <datetime> string inside quotes if it contains spaces.

To retrieve any previous version of a specific configuration or multiple specific
configurations from shell, invoke

  <installdir>/generate-configs.php --before|--after <datetime> <platform> <type> <name1>,<name2>,<name3>,...

By default, generate-configs.php dumps generated configuration to stdout, but you
can send it via email and/or save it to file instead.

To update autopolicies from shell, invoke

  <installdir>/update-templates.php

To update specific autopolicy from shell, invoke

  <installdir>/update-templates.php <name>

To update multiple specific autopolicies from shell, invoke

  <installdir>/update-templates.php <name1>,<name2>,<name3>,...

That's about it.

